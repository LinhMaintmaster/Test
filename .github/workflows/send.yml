name: Send Metrics to Grafana Cloud via Pushgateway

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  send-metrics:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Install dependencies (jq for JSON parsing, curl for HTTP requests)
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      # Step 3: Read the metrics.json file from the repo, parse metric values and export them as outputs
      - name: Read JSON and prepare metrics
        id: metrics
        run: |
          json_file="metrics.json"

          if [ ! -f "$json_file" ]; then
            echo "Error: $json_file not found!"
            exit 1
          fi

          echo "Contents of $json_file:"
          cat $json_file

          metric_name=$(jq -r '.metric_name' $json_file)
          pr_id=$(jq -r '.labels.pr_id' $json_file)
          total=$(jq -r '.labels.total' $json_file)
          passed=$(jq -r '.labels.passed' $json_file)
          failed=$(jq -r '.labels.failed' $json_file)
          skipped=$(jq -r '.labels.skipped' $json_file)
          value=$(jq -r '.value' $json_file)

          echo "Parsed values:"
          echo "Metric Name: $metric_name"
          echo "PR ID: $pr_id"
          echo "Total: $total"
          echo "Passed: $passed"
          echo "Failed: $failed"
          echo "Skipped: $skipped"
          echo "Value: $value"

          # Export these variables for use in later steps
          echo "metric_name=$metric_name" >> $GITHUB_OUTPUT
          echo "pr_id=$pr_id" >> $GITHUB_OUTPUT
          echo "total=$total" >> $GITHUB_OUTPUT
          echo "passed=$passed" >> $GITHUB_OUTPUT
          echo "failed=$failed" >> $GITHUB_OUTPUT
          echo "skipped=$skipped" >> $GITHUB_OUTPUT
          echo "value=$value" >> $GITHUB_OUTPUT

      # Step 4: Setup Docker buildx (used for running Docker containers)
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      # Step 5: Pull and start Pushgateway container to receive pushed metrics
      - name: Start Pushgateway
        run: |
          docker run -d --name pushgateway -p 9091:9091 prom/pushgateway:latest
          echo "Waiting for Pushgateway to start..."
          sleep 5

      # Step 6: Push metrics to Pushgateway with labels from the parsed JSON
      - name: Push metrics to Pushgateway
        env:
          METRIC_NAME: ${{ steps.metrics.outputs.metric_name }}
          PR_ID: ${{ steps.metrics.outputs.pr_id }}
          TOTAL: ${{ steps.metrics.outputs.total }}
          PASSED: ${{ steps.metrics.outputs.passed }}
          FAILED: ${{ steps.metrics.outputs.failed }}
          SKIPPED: ${{ steps.metrics.outputs.skipped }}
          VALUE: ${{ steps.metrics.outputs.value }}
        run: |
          # Use default metric name if none provided
          if [ -z "$METRIC_NAME" ]; then
            METRIC_NAME="test_summary_v2"
            echo "Metric name not provided, using default: $METRIC_NAME"
          fi

          # Push metric to Pushgateway following Prometheus format with labels
          cat <<EOF | curl --data-binary @- http://localhost:9091/metrics/job/playwright_test/pr_id/${PR_ID}/total/${TOTAL}/passed/${PASSED}/failed/${FAILED}/skipped/${SKIPPED}
          # TYPE ${METRIC_NAME} gauge
          ${METRIC_NAME} ${VALUE}
          EOF

          echo "Metrics pushed to Pushgateway"

      # Step 7: Create prometheus.yml config file for Prometheus server to scrape Pushgateway and forward metrics to Grafana Cloud
      - name: Create Prometheus config
        run: |
          cat > prometheus.yml <<EOF
          global:
            scrape_interval: 15s
            evaluation_interval: 15s

          scrape_configs:
            - job_name: 'pushgateway'
              honor_labels: true
              static_configs:
                - targets: ['localhost:9091']

          remote_write:
            - url: "${GRAFANA_CLOUD_URL}"
              basic_auth:
                username: "${GRAFANA_CLOUD_USER}"
                password: "${GRAFANA_CLOUD_API_KEY}"
          EOF

          echo "Prometheus config created:"
          cat prometheus.yml
        env:
          GRAFANA_CLOUD_URL: ${{ secrets.GRAFANA_CLOUD_URL }}
          GRAFANA_CLOUD_USER: ${{ secrets.GRAFANA_CLOUD_USER }}
          GRAFANA_CLOUD_API_KEY: ${{ secrets.GRAFANA_CLOUD_API_KEY }}

      # Step 8: Start Prometheus container with the config, so it scrapes Pushgateway metrics and pushes to Grafana Cloud
      - name: Start Prometheus and send metrics to Grafana Cloud
        env:
          METRIC_NAME: ${{ steps.metrics.outputs.metric_name }}
        run: |
          if [ -z "$METRIC_NAME" ]; then
            METRIC_NAME="test_summary_v2"
          fi

          docker run -d --name prometheus --network host \
            -v $(pwd)/prometheus.yml:/etc/prometheus/prometheus.yml \
            prom/prometheus:latest \
            --config.file=/etc/prometheus/prometheus.yml \
            --web.enable-lifecycle \
            --log.level=debug

          echo "Prometheus started"
          echo "Waiting for Prometheus to scrape metrics and send to Grafana Cloud..."
          sleep 30

          # Show Prometheus logs for debugging
          docker logs prometheus

      # Step 9: Verify that Prometheus is scraping metrics and metrics exist
      - name: Verify metrics were sent
        env:
          METRIC_NAME: ${{ steps.metrics.outputs.metric_name }}
        run: |
          if [ -z "$METRIC_NAME" ]; then
            METRIC_NAME="test_summary_v2"
          fi

          # Check Prometheus scrape targets to confirm Pushgateway is being scraped
          curl -s http://localhost:9090/api/v1/targets | jq .

          # Query Prometheus for the metric to ensure it exists
          RESULT=$(curl -s "http://localhost:9090/api/v1/query?query=${METRIC_NAME}" | jq -r '.data.result | length')

          if [ "$RESULT" -gt 0 ]; then
            echo "✅ Metrics successfully available in Prometheus"
            curl -s "http://localhost:9090/api/v1/query?query=${METRIC_NAME}" | jq .
          else
            echo "❌ Metrics not found in Prometheus"
            exit 1
          fi

      # Step 10: Clean up Docker containers after workflow finishes
      - name: Clean up containers
        if: always()
        run: |
          docker stop prometheus pushgateway || true
          docker rm prometheus pushgateway || true

name: 2nd Run
on:
  workflow_run:
    workflows: ["1st Run"]
    types:
      - completed

permissions:
  contents: read
  actions: read

jobs:
  send-metrics-fail-job:
    runs-on: ubuntu-latest
    env:
      METRIC_NAME: tung_summary_v1
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install jq and curl
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: Get artifact ID for summary-json
        id: get_artifact
        run: |
          ARTIFACT_ID=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }}/artifacts \
            | jq -r '.artifacts[] | select(.name == "summary-json") | .id')

          if [ -z "$ARTIFACT_ID" ]; then
            echo "❌ Artifact 'summary-json' not found."
            exit 1
          fi

          echo "id=$ARTIFACT_ID" >> $GITHUB_OUTPUT

      - name: Download and extract artifact
        run: |
          curl -L \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/actions/artifacts/${{ steps.get_artifact.outputs.id }}/zip \
            --output artifact.zip

          unzip artifact.zip
          ls -R

      - name: Display downloaded file content
        run: |
          echo "Downloaded artifact content:"
          cat converted-metrics.json

      - name: Extract test results from converted-metrics.json
        id: extract-summary
        run: |
          if [ ! -f "converted-metrics.json" ]; then
            echo "converted-metrics.json not found."
            exit 1
          fi

          TOTAL=$(jq '.tests // 0' converted-metrics.json)
          PASSED=$(jq '.passed // 0' converted-metrics.json)
          FAILED=$(jq '.failed // 0' converted-metrics.json)
          SKIPPED=$(jq '.skipped // 0' converted-metrics.json)
          FLAKY=$(jq '.flaky // 0' converted-metrics.json)

          echo "TOTAL=$TOTAL" >> $GITHUB_ENV
          echo "PASSED=$PASSED" >> $GITHUB_ENV
          echo "FAILED=$FAILED" >> $GITHUB_ENV
          echo "SKIPPED=$SKIPPED" >> $GITHUB_ENV
          echo "FLAKY=$FLAKY" >> $GITHUB_ENV

          echo "Test Summary - Total: $TOTAL, Passed: $PASSED, Failed: $FAILED, Skipped: $SKIPPED, Flaky: $FLAKY"

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Start Pushgateway
        run: |
          docker run -d --name pushgateway -p 9091:9091 prom/pushgateway:latest
          echo "Waiting for Pushgateway to start..."

          for i in {1..10}; do
            if curl -s http://localhost:9091/metrics > /dev/null; then
              echo "Pushgateway is ready"
              break
            fi
            echo "Pushgateway not ready yet... retrying ($i/10)"
            sleep 1
          done

          # Final check in case loop fails
          if ! curl -s http://localhost:9091/metrics > /dev/null; then
            echo "Pushgateway did not start in time"
            exit 1
          fi

      - name: Set timestamp
        id: set_time
        run: echo "UNIX_TIMESTAMP=$(date +%s)" >> "$GITHUB_OUTPUT"

      - name: Push metrics to Pushgateway
        env:
          METRIC_NAME: ${{ env.METRIC_NAME }}
          PR_ID: ${{ github.run_id }}
          PR_TITLE: "[DRAFT - DO NOT REVIEW ]Feature/qa granfa"
          TOTAL: ${{ env.TOTAL }}
          PASSED: ${{ env.PASSED }}
          FAILED: ${{ env.FAILED }}
          SKIPPED: ${{ env.SKIPPED }}
          FLAKY: ${{ env.FLAKY }}
          VALUE: ${{ steps.set_time.outputs.UNIX_TIMESTAMP }}
        run: |
          if [ -z "$METRIC_NAME" ]; then
            METRIC_NAME="test_summary_v2"
            echo "Metric name not provided, using default: $METRIC_NAME"
          fi

          ESCAPED_TITLE=$(echo "$PR_TITLE" | sed -e 's/\\/\\\\/g' -e 's/"/\\"/g')

          cat <<EOF | curl --data-binary @- http://localhost:9091/metrics/job/playwright_test
          # TYPE ${METRIC_NAME} gauge
          ${METRIC_NAME}{pr_id="${PR_ID}",pr_title="${ESCAPED_TITLE}",total="${TOTAL}",passed="${PASSED}",failed="${FAILED}",skipped="${SKIPPED}",flaky="${FLAKY}"} ${VALUE}
          EOF

          echo "✅ Metrics pushed to Pushgateway"

      - name: Create Prometheus config
        run: |
          cat > prometheus.yml <<EOF
          global:
            scrape_interval: 15s
            evaluation_interval: 15s

          scrape_configs:
            - job_name: 'pushgateway'
              honor_labels: true
              static_configs:
                - targets: ['localhost:9091']

          remote_write:
            - url: "${GRAFANA_CLOUD_URL}"
              basic_auth:
                username: "${GRAFANA_CLOUD_USER}"
                password: "${GRAFANA_CLOUD_API_KEY}"
          EOF

          cat prometheus.yml
        env:
          GRAFANA_CLOUD_URL: ${{ secrets.GRAFANA_CLOUD_URL }}
          GRAFANA_CLOUD_USER: ${{ secrets.GRAFANA_CLOUD_USER }}
          GRAFANA_CLOUD_API_KEY: ${{ secrets.GRAFANA_CLOUD_API_KEY }}

      - name: Start Prometheus
        run: |
          docker run -d --name prometheus --network host \
            -v $(pwd)/prometheus.yml:/etc/prometheus/prometheus.yml \
            prom/prometheus:latest \
            --config.file=/etc/prometheus/prometheus.yml \
            --web.enable-lifecycle

          echo "Waiting for Prometheus to scrape and forward metrics..."

          METRIC_NAME=${{ env.METRIC_NAME }}
          TIMEOUT=60
          INTERVAL=5
          ELAPSED=0

          until curl -s "http://localhost:9090/api/v1/query?query=${METRIC_NAME}" | jq -e '.data.result | length > 0' > /dev/null; do
            if [ "$ELAPSED" -ge "$TIMEOUT" ]; then
              echo "Timed out waiting for metric ${METRIC_NAME} to appear in Prometheus"
              exit 1
            fi
            echo "Still waiting... (${ELAPSED}s elapsed)"
            sleep $INTERVAL
            ELAPSED=$((ELAPSED + INTERVAL))
          done

          echo "Metric ${METRIC_NAME} found in Prometheus."

      - name: Verify metrics were sent
        run: |
          METRIC_NAME="${METRIC_NAME:-$METRIC_NAME_DEFAULT}"

          echo "Checking if Prometheus has scraped the metric: $METRIC_NAME"

          TIMEOUT=60
          INTERVAL=5
          ELAPSED=0
          SUCCESS=false

          # Loop until metric is found or timeout
          while [ "$ELAPSED" -lt "$TIMEOUT" ]; do
            echo "Querying Prometheus... (${ELAPSED}s elapsed)"
            RESPONSE=$(curl -s "http://localhost:9090/api/v1/query?query=${METRIC_NAME}")
            COUNT=$(echo "$RESPONSE" | jq -r '.data.result | length')

            if [ "$COUNT" -gt 0 ]; then
              echo "Metrics successfully available in Prometheus"
              echo "$RESPONSE" | jq .
              SUCCESS=true
              break
            fi

            sleep $INTERVAL
            ELAPSED=$((ELAPSED + INTERVAL))
          done

          if [ "$SUCCESS" != true ]; then
            echo "Metrics not found in Prometheus after ${TIMEOUT}s"
            echo "Last Prometheus response:"
            echo "$RESPONSE" | jq .
            exit 1
          fi

      - name: Clean up containers
        if: always()
        run: |
          docker stop prometheus pushgateway || true
          docker rm prometheus pushgateway || true

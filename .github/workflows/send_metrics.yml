name: Send Metrics to Grafana Cloud via Pushgateway

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  send-metrics:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: Read JSON and prepare metrics
        id: metrics
        run: |
          # File is in repository root
          json_file="metrics.json"

          # Check if JSON file exists
          if [ ! -f "$json_file" ]; then
            echo "Error: $json_file not found!"
            exit 1
          fi

          # Debug: show file contents
          echo "Contents of $json_file:"
          cat $json_file

          # Parse JSON fields with jq
          pr_id=$(jq -r '.labels.pr_id' $json_file)
          total=$(jq -r '.labels.total' $json_file)
          passed=$(jq -r '.labels.passed' $json_file)
          failed=$(jq -r '.labels.failed' $json_file)
          skipped=$(jq -r '.labels.skipped' $json_file)
          value=$(jq -r '.value' $json_file)

          # Show parsed values
          echo "Parsed values:"
          echo "PR ID: $pr_id"
          echo "Total: $total"
          echo "Passed: $passed"
          echo "Failed: $failed"
          echo "Skipped: $skipped"
          echo "Value: $value"

          # Set output variables to be used in later steps
          echo "pr_id=$pr_id" >> $GITHUB_OUTPUT
          echo "total=$total" >> $GITHUB_OUTPUT
          echo "passed=$passed" >> $GITHUB_OUTPUT
          echo "failed=$failed" >> $GITHUB_OUTPUT
          echo "skipped=$skipped" >> $GITHUB_OUTPUT
          echo "value=$value" >> $GITHUB_OUTPUT

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Start Pushgateway
        run: |
          docker run -d --name pushgateway -p 9091:9091 prom/pushgateway:latest
          echo "Waiting for Pushgateway to start..."
          sleep 5

      - name: Push metrics to Pushgateway
        env:
          PR_ID: ${{ steps.metrics.outputs.pr_id }}
          TOTAL: ${{ steps.metrics.outputs.total }}
          PASSED: ${{ steps.metrics.outputs.passed }}
          FAILED: ${{ steps.metrics.outputs.failed }}
          SKIPPED: ${{ steps.metrics.outputs.skipped }}
          VALUE: ${{ steps.metrics.outputs.value }}
        run: |
          # Push our test metric to Pushgateway with the labels from our metrics
          cat <<EOF | curl --data-binary @- http://localhost:9091/metrics/job/playwright_test/pr_id/${PR_ID}/total/${TOTAL}/passed/${PASSED}/failed/${FAILED}/skipped/${SKIPPED}
          # TYPE test_summary_l1 gauge
          test_summary_l1 ${VALUE}
          EOF

          echo "Metrics pushed to Pushgateway"

      - name: Create Prometheus config
        run: |
          cat > prometheus.yml <<EOF
          global:
            scrape_interval: 15s
            evaluation_interval: 15s

          scrape_configs:
            - job_name: 'pushgateway'
              honor_labels: true
              static_configs:
                - targets: ['localhost:9091']

          remote_write:
            - url: "${GRAFANA_CLOUD_URL}"
              basic_auth:
                username: "${GRAFANA_CLOUD_USER}"
                password: "${GRAFANA_CLOUD_API_KEY}"
          EOF

          echo "Prometheus config created:"
          cat prometheus.yml
        env:
          GRAFANA_CLOUD_URL: ${{ secrets.GRAFANA_CLOUD_URL }}
          GRAFANA_CLOUD_USER: ${{ secrets.GRAFANA_CLOUD_USER }}
          GRAFANA_CLOUD_API_KEY: ${{ secrets.GRAFANA_CLOUD_API_KEY }}

      - name: Start Prometheus and send metrics to Grafana Cloud
        run: |
          docker run -d --name prometheus --network host \
            -v $(pwd)/prometheus.yml:/etc/prometheus/prometheus.yml \
            prom/prometheus:latest \
            --config.file=/etc/prometheus/prometheus.yml \
            --web.enable-lifecycle \
            --log.level=debug

          echo "Prometheus started"

          # Wait for Prometheus to scrape Pushgateway and send to Grafana Cloud
          echo "Waiting for Prometheus to scrape metrics and send to Grafana Cloud..."
          sleep 30

          # Show Prometheus logs
          docker logs prometheus

      - name: Verify metrics were sent
        run: |
          # Check Prometheus targets to ensure Pushgateway is being scraped
          curl -s http://localhost:9090/api/v1/targets | jq .

          # Query the metric to ensure it exists in Prometheus
          RESULT=$(curl -s 'http://localhost:9090/api/v1/query?query=test_summary_v2' | jq -r '.data.result | length')

          if [ "$RESULT" -gt 0 ]; then
            echo "✅ Metrics successfully available in Prometheus"
            curl -s 'http://localhost:9090/api/v1/query?query=test_summary_v2' | jq .
          else
            echo "❌ Metrics not found in Prometheus"
            exit 1
          fi

      - name: Clean up containers
        if: always()
        run: |
          docker stop prometheus pushgateway || true
          docker rm prometheus pushgateway || true
